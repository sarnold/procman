[tox]
envlist = py3{6,7,8,9,10,11}-{linux,macos,windows}
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[gh-actions:env]
PLATFORM =
    ubuntu-20.04: linux
    macos-11: macos
    windows-2019: windows

[base]
deps =
    pip>=21.1
    versioningit

[build]
deps =
    pip>=21.1
    build
    twine

[testenv]
skip_install = true

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash

deps =
    {[base]deps}
    #-r requirements.txt
    .[examples]

commands =
    procman --version
    procman --dump-config

[testenv:dev]
skip_install = true

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash

deps =
    {[base]deps}
    -r requirements.txt
    -e .

commands =
    procman --test
    procman --show
    procman --countdown {posargs:5}

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

deps =
    pip>=21.1

commands =
    bash -c 'make -C docs/ clean'
    bash -c 'rm -rf *.egg-info procman/__pycache__ dist/ build/ docs/source/api/'

[testenv:docs]
skip_install = true
allowlist_externals =
    bash
    make

deps =
    {[base]deps}
    .[doc]

commands_pre =
    # need to generate version info in a fresh checkout
    bash -c '[[ -f procman/_version.py ]] || python setup.py egg_info'

commands = make -C docs html

[testenv:docs-lint]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

deps =
    {[base]deps}
    .[doc]

commands_pre =
    {[testenv:docs]commands_pre}

commands = make -C docs linkcheck

[testenv:build]
skip_install = true

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true
passenv = CI

deps =
    #{[base]deps}
    pip>=21.1

commands =
    pip install procman --force-reinstall --pre --prefer-binary -f dist/
    procman --version

[testenv:lint]
passenv =
    CI
    PYTHONIOENCODING

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    pylint
    -r requirements.txt

commands_pre =
    {[testenv:docs]commands_pre}

commands =
    pylint --fail-under=9.75 --ignore=_version.py procman/

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands =
    flake8 procman/

[testenv:mypy]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    mypy
    munch-stubs
    -r requirements.txt

commands_pre =
    {[testenv:docs]commands_pre}

commands =
    #stubgen -m munch --export-less -o {toxinidir}
    python -m mypy --follow-imports=normal --install-types --non-interactive procman/

[testenv:isort]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    isort
    -r requirements.txt

commands =
    python -m isort procman/
